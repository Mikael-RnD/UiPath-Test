name: 'UiPath Test'
description: 'Runs test cases within a UiPath project'
inputs:
  projectFilePaths:
    description: 'Used for passing explicit paths to project files to perform analysis. Can be used as multi-line inputs'
    required: false
  orchestratorUrl: 
    description: 'Orchestrator instance URL'
    required: true
  orchestratorTenant:
    description: 'Tenant on the Orchestrator instance'
    required: true
  orchestratorFolder:
    description: 'Folder path in modern folder setup'
    required: true
  orchestratorApplicationId:
    description: 'Account for authenticating to Orchestrator'
    required: true
  orchestratorApplicationSecret:
    description: 'Password for the Orchestrator account'
    required: true
  orchestratorApplicationScope:
    description: 'Access scope for external application'
    required: true
  orchestratorLogicalName:
    description: 'Logical name for Orchestrator organization'
    required: true
outputs:
  testExecutionLinks:
    description: 'Outputs a comma-separated list of Orchestrator links for viewing test results'
    value: ${{ steps.run_tests.outputs.testExecutionLinks }}
  testResults:
    description: 'Markdown formatted table listing the tests that have been run and whether they passed or failed'
    value: ${{ steps.run_tests.outputs.testResults }}
    
runs:
  using: "composite"
  steps:
    - id: get_folder_id
      name: Get Folder ID
      shell: pwsh
      run: |
        $headers = New-Object "System.Collections.Generic.Dictionary[[String],[String]]"
        $headers.Add("Content-Type", "application/x-www-form-urlencoded")

        $orchestratorURL = "${{ inputs.orchestratorUrl }}".TrimEnd("/")
        $clientId = [System.Web.HttpUtility]::UrlEncode("${{ inputs.orchestratorApplicationId }}")
        $clientSecret = [System.Web.HttpUtility]::UrlEncode("${{ inputs.orchestratorApplicationSecret }}") 
        $scope = [System.Web.HttpUtility]::UrlEncode("${{ inputs.orchestratorApplicationScope }}")

        $body = "grant_type=client_credentials&client_id=$clientId&client_secret=$clientSecret&scope=$scope"
        $authResponse = Invoke-RestMethod "$orchestratorURL/identity_/connect/token" -Method 'POST' -Headers $headers -Body $body
        $authResponse | ConvertTo-Json | Out-Null
        $accessToken = $authResponse.access_token

        $folderName = "'${{ inputs.orchestratorFolder }}'"
        $parameters = "`$Filter=FullyQualifiedName eq $folderName"
        $folderRequestURL = "$orchestratorURL/${{ inputs.orchestratorLogicalName }}/${{ inputs.orchestratorTenant }}/orchestrator_/odata/folders?$parameters"
        $folderRequestHeaders = New-Object "System.Collections.Generic.Dictionary[[String],[String]]"
        $folderRequestHeaders.Add("Authorization", "Bearer $accessToken")
        $folderRequestResponse = Invoke-RestMethod $folderRequestURL -Method 'GET' -Headers $folderRequestHeaders
        $folderRequestResponse | ConvertTo-Json 
        $folderId = $folderRequestResponse.value[0].Id
        Write-Output "folderId=$($folderId)" >> $Env:GITHUB_OUTPUT
  
    - id: run_tests
      name: Test
      shell: pwsh
      run: |
        $testsFailed = 0
        $testResultsFolder = "${{ github.workspace }}\test-results"
        
        if([string]::IsNullOrEmpty("${{ inputs.projectFilePaths }}")) 
        {
          Write-Host "Scanning full repository directory for project.json files"
          $projectJsonFiles = Get-ChildItem -Path ${{ github.workspace }} -Recurse -Filter project.json -File
        } 
        else 
        {
          Write-Host "Getting full path for files given as inputs"
          $projectJsonFiles = "${{ inputs.projectFilePaths }}".Trim()
          $projectJsonFiles = $projectJsonFiles -split "`r`n"
          $projectJsonFiles | Where { -not  [string]::IsNullOrWhiteSpace($_) } | Get-ChildItem -File
        }
        
        $projectList = Get-ChildItem -Path ${{ github.workspace }} -Recurse -Filter project.json -File
        New-Item -Path $testResultsFolder -ItemType "directory"
        $testResults = ""
        
        $testExecutionBaseURL = "${{ inputs.orchestratorUrl }}" + "default/DefaultTenant/orchestrator_/test/executions/"
        $testExecutionURLs = "" 

        $repositoryContainsTests = 0
        
        foreach($p in $projectJsonFiles)
        {
          $project = [System.IO.FileInfo]$p
          $projectInfo=Get-Content "$($project.FullName)" | ConvertFrom-Json
          $targetFramework = $projectInfo.targetFramework
          
          # If fileInfoCollection contains any entries, check for test cases set as Publishable
          $fileInfoCollection = $projectInfo.designOptions.fileInfoCollection
          if($fileInfoCollection.Length -gt 0){
            # If fileInfoCollection contains any entries with editingStatus "Publishable", run tests
            if($fileInfoCollection.Where({$_.editingStatus -eq 'Publishable'}).Count -gt 0) {
              $repositoryContainsTests = 1
              $testResultFilePath = $testResultsFolder+"\"+$projectInfo.name+"-testresults.json" 
              
              Write-Host "Running tests for project " $projectInfo.name
              & uipcli test run ${{ inputs.orchestratorUrl }} ${{ inputs.orchestratorTenant }} -P "$($project.FullName)" --accountForApp "${{ inputs.orchestratorLogicalName }}" --applicationId  "${{ inputs.orchestratorApplicationId }}" --applicationSecret "${{ inputs.orchestratorApplicationSecret }}" --applicationScope "${{ inputs.orchestratorApplicationScope }}" --organizationUnit "${{ inputs.orchestratorFolder }}" --out uipath --result_path "$testResultFilePath" --language en-US
              
              # Printing test results to GitHub Actions log and adding results to output
              
              $testResultData=Get-Content $testResultFilePath | ConvertFrom-Json
              $testCaseExecutions = $testResultData.TestSetExecutions.TestCaseExecutions
              
              $folderId = ${{ steps.get_folder_id.outputs.folderId }}
              $testSetExecutionLink = $testExecutionBaseURL + $testResultData.TestSetExecutions[0].Id + "?fid=$folderId" 
              Write-Host "Test execution can be viewed in Orchestrator by clicking this link: $testSetExecutionLink" 
              
              $testResultsTable = "| Test case | Result |`n| :-- | :-- |"
              $testCaseExecutions | ForEach-Object({$testResultsTable += "`n| " + $_.Name  + " | " + $_.Status + " |"})
              $testResults += "`n### [Test results for " + $testResultData.TestSetExecutions[0].Name + "]("+ $testSetExecutionLink +")`n" + $testResultsTable
              
              $testCaseExecutions |  Format-Table -Property Name, DataVariationIdentifier, Status


              if($testExecutionURLs -eq ""){
                $testExecutionURLs = $testSetExecutionLink
              }
              else {
                $testExecutionURLs = $testExecutionURLs + " , " + $testSetExecutionLink
              }

              if($LASTEXITCODE -ne 0)
              {
                $testsFailed = 1
              }
            }
            else {
              Write-Host $projectInfo.name " contains no test cases set as publishable. Testing skipped."
            }
          }
          else {
            Write-Host $projectInfo.name " contains no test cases. Testing skipped."
          }
        }

        # Set output values
        Write-Output "testExecutionLinks=$($testExecutionURLs)" >> $Env:GITHUB_OUTPUT
        
        echo 'testResults<<EOF' >> $Env:GITHUB_OUTPUT
        echo $testResults.Trim() >> $Env:GITHUB_OUTPUT
        echo EOF >> $Env:GITHUB_OUTPUT

        # Create text file with note on tests not existing.
        if($repositoryContainsTests -eq 0){
          "No publishable UiPath test cases were found in this repository. Testing has been skipped. " | Out-File $testResultsFolder\"test.txt"
        }
        if($testsFailed -ne 0)
        {
          throw "Tests failed"
        }

    - id: print_outputs
      name: Print outputs
      if: always()
      shell: pwsh
      run: | 
        echo "${{ steps.run_tests.outputs.testExecutionLinks }}"
        echo "${{ steps.run_tests.outputs.testResults }}"
